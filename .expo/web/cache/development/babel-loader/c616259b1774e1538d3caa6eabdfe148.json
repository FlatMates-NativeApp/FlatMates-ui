{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { createContext, useState, useContext } from 'react';\nimport { loginUser } from \"../hooks/apiCalls\";\nexport var AuthContext = createContext();\nexport var AuthContextProvider = function AuthContextProvider(props) {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      authData = _useState2[0],\n      setAuthData = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var logIn = function logIn(data) {\n    var authData;\n    return _regeneratorRuntime.async(function logIn$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(loginUser(data));\n\n          case 2:\n            authData = _context.sent;\n            setAuthData(authData);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var signOut = function signOut() {\n    return _regeneratorRuntime.async(function signOut$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setAuthData(undefined);\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(AuthContext.Provider, {\n    value: {\n      authData: authData,\n      setAuthData: setAuthData,\n      loading: loading,\n      logIn: logIn,\n      signOut: signOut\n    }\n  }, props.children);\n};\nexport var useAuth = function useAuth() {\n  var context = useContext(AuthContext);\n\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n\n  return context;\n};","map":{"version":3,"sources":["/Users/jonathan/DCI/flatmates_project/FlatMates-ui/app/context/AuthContext.js"],"names":["React","createContext","useState","useContext","loginUser","AuthContext","AuthContextProvider","props","authData","setAuthData","loading","setLoading","logIn","data","signOut","undefined","children","useAuth","context","Error"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,UAAzC,QAA2D,OAA3D;AACA,SAASC,SAAT;AAEA,OAAO,IAAMC,WAAW,GAAGJ,aAAa,EAAjC;AAEP,OAAO,IAAMK,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,KAAD,EAAW;AAC5C,kBAAgCL,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOM,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAA8BP,QAAQ,CAAC,IAAD,CAAtC;AAAA;AAAA,MAAOQ,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,MAAMC,KAAK,GAAG,SAARA,KAAQ,CAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACWT,SAAS,CAACS,IAAD,CADpB;;AAAA;AACNL,YAAAA,QADM;AAEZC,YAAAA,WAAW,CAACD,QAAD,CAAX;;AAFY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;;AAKA,MAAMM,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AACdL,YAAAA,WAAW,CAACM,SAAD,CAAX;;AADc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAIA,SACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEP,MAAAA,QAAQ,EAARA,QAAF;AAAYC,MAAAA,WAAW,EAAXA,WAAZ;AAAyBC,MAAAA,OAAO,EAAPA,OAAzB;AAAkCE,MAAAA,KAAK,EAALA,KAAlC;AAAyCE,MAAAA,OAAO,EAAPA;AAAzC;AAA7B,KACGP,KAAK,CAACS,QADT,CADF;AAKD,CAlBM;AAoBP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAC3B,MAAMC,OAAO,GAAGf,UAAU,CAACE,WAAD,CAA1B;;AACA,MAAI,CAACa,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACD;;AACD,SAAOD,OAAP;AACD,CANM","sourcesContent":["import React, { createContext, useState, useContext } from 'react';\nimport { loginUser } from '../hooks/apiCalls';\n\nexport const AuthContext = createContext();\n\nexport const AuthContextProvider = (props) => {\n  const [authData, setAuthData] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  const logIn = async (data) => {\n    const authData = await loginUser(data);\n    setAuthData(authData);\n  };\n\n  const signOut = async () => {\n    setAuthData(undefined);\n  };\n\n  return (\n    <AuthContext.Provider value={{ authData, setAuthData, loading, logIn, signOut }}>\n      {props.children}\n    </AuthContext.Provider>\n  )\n}\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n\n"]},"metadata":{},"sourceType":"module"}