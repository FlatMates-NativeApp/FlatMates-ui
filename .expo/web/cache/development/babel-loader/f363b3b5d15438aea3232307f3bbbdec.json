{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport CustomText from \"../../components/general/CustomText\";\nimport { useForm, Controller } from 'react-hook-form';\nimport { useAuth } from \"../../context/AuthContext\";\n\nvar Login = function Login(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useAuth = useAuth(),\n      logIn = _useAuth.logIn;\n\n  var _useForm = useForm(),\n      control = _useForm.control,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.formState.errors;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var loginHandler = function loginHandler() {\n    return _regeneratorRuntime.async(function loginHandler$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(logIn({\n              email: email,\n              password: password\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  console.log(email.value, password.value);\n  return React.createElement(SafeAreaView, null, React.createElement(CustomText, {\n    title: \"Login Screen\",\n    h1: true\n  }), React.createElement(Controller, {\n    control: control,\n    rules: {\n      required: true\n    },\n    render: function render(_ref2) {\n      var _ref2$field = _ref2.field,\n          onChange = _ref2$field.onChange,\n          value = _ref2$field.value,\n          onBlur = _ref2$field.onBlur;\n      return React.createElement(TextInput, {\n        onBlur: onBlur,\n        onChangeText: onChange,\n        value: value,\n        keyboardType: \"email-address\",\n        placeholder: \"Enter email\"\n      });\n    },\n    name: \"email\",\n    defaultValue: \"\"\n  }), errors.email && React.createElement(Text, null, \"Email is required.\"), React.createElement(Controller, {\n    control: control,\n    rules: {\n      required: true\n    },\n    render: function render(_ref3) {\n      var _ref3$field = _ref3.field,\n          onChange = _ref3$field.onChange,\n          value = _ref3$field.value,\n          onBlur = _ref3$field.onBlur;\n      return React.createElement(TextInput, {\n        onBlur: onBlur,\n        onChangeText: onChange,\n        value: value,\n        secureTextEntry: true,\n        placeholder: \"Enter password\"\n      });\n    },\n    name: \"password\",\n    defaultValue: \"\"\n  }), errors.password && React.createElement(Text, null, \"Password is required.\"), React.createElement(Button, {\n    title: \"Login\",\n    onPress: handleSubmit(loginHandler)\n  }));\n};\n\nexport default Login;","map":{"version":3,"sources":["/Users/jonathan/DCI/flatmates_project/FlatMates-ui/app/screens/login/Login.js"],"names":["React","useState","CustomText","useForm","Controller","useAuth","Login","navigation","logIn","control","handleSubmit","errors","formState","email","setEmail","password","setPassword","loginHandler","console","log","value","required","field","onChange","onBlur"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;;;AAEA,OAAOC,UAAP;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,iBAApC;AAGA,SAASC,OAAT;;AAQA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAAkB;AAAA,MAAhBC,UAAgB,QAAhBA,UAAgB;;AAC9B,iBAAkBF,OAAO,EAAzB;AAAA,MAAQG,KAAR,YAAQA,KAAR;;AAEA,iBAAyDL,OAAO,EAAhE;AAAA,MAAQM,OAAR,YAAQA,OAAR;AAAA,MAAiBC,YAAjB,YAAiBA,YAAjB;AAAA,MAA4CC,MAA5C,YAA+BC,SAA/B,CAA4CD,MAA5C;;AAEA,kBAA0BV,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOY,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAAgCb,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOc,QAAP;AAAA,MAAiBC,WAAjB;;AAEA,MAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACbT,KAAK,CAAC;AAACK,cAAAA,KAAK,EAALA,KAAD;AAAQE,cAAAA,QAAQ,EAARA;AAAR,aAAD,CADQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAIAG,EAAAA,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACO,KAAlB,EAAyBL,QAAQ,CAACK,KAAlC;AAEA,SACE,oBAAC,YAAD,QACE,oBAAC,UAAD;AACE,IAAA,KAAK,EAAC,cADR;AAEE,IAAA,EAAE;AAFJ,IADF,EAME,oBAAC,UAAD;AACE,IAAA,OAAO,EAAEX,OADX;AAEE,IAAA,KAAK,EAAE;AACLY,MAAAA,QAAQ,EAAE;AADL,KAFT;AAKE,IAAA,MAAM,EAAE;AAAA,8BAAGC,KAAH;AAAA,UAAYC,QAAZ,eAAYA,QAAZ;AAAA,UAAsBH,KAAtB,eAAsBA,KAAtB;AAAA,UAA6BI,MAA7B,eAA6BA,MAA7B;AAAA,aACN,oBAAC,SAAD;AACE,QAAA,MAAM,EAAEA,MADV;AAEE,QAAA,YAAY,EAAED,QAFhB;AAGE,QAAA,KAAK,EAAEH,KAHT;AAIE,QAAA,YAAY,EAAC,eAJf;AAKE,QAAA,WAAW,EAAC;AALd,QADM;AAAA,KALV;AAcE,IAAA,IAAI,EAAC,OAdP;AAeE,IAAA,YAAY,EAAC;AAff,IANF,EAuBGT,MAAM,CAACE,KAAP,IAAgB,oBAAC,IAAD,6BAvBnB,EA0BE,oBAAC,UAAD;AACE,IAAA,OAAO,EAAEJ,OADX;AAEE,IAAA,KAAK,EAAE;AACLY,MAAAA,QAAQ,EAAE;AADL,KAFT;AAKE,IAAA,MAAM,EAAE;AAAA,8BAAGC,KAAH;AAAA,UAAYC,QAAZ,eAAYA,QAAZ;AAAA,UAAsBH,KAAtB,eAAsBA,KAAtB;AAAA,UAA6BI,MAA7B,eAA6BA,MAA7B;AAAA,aACN,oBAAC,SAAD;AACE,QAAA,MAAM,EAAEA,MADV;AAEE,QAAA,YAAY,EAAED,QAFhB;AAGE,QAAA,KAAK,EAAEH,KAHT;AAIE,QAAA,eAAe,EAAE,IAJnB;AAKE,QAAA,WAAW,EAAC;AALd,QADM;AAAA,KALV;AAcE,IAAA,IAAI,EAAC,UAdP;AAeE,IAAA,YAAY,EAAC;AAff,IA1BF,EA2CGT,MAAM,CAACI,QAAP,IAAmB,oBAAC,IAAD,gCA3CtB,EA6CE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,OAAd;AAAsB,IAAA,OAAO,EAAEL,YAAY,CAACO,YAAD;AAA3C,IA7CF,CADF;AAkED,CAhFD;;AAkFA,eAAeX,KAAf","sourcesContent":["import React, { useState } from 'react'\nimport { SafeAreaView, Text, TextInput, TouchableOpacity, Button, Alert } from 'react-native';\nimport CustomText from '../../components/general/CustomText';\nimport { useForm, Controller } from 'react-hook-form';\n\n// * CONTEXT IMPORT\nimport { useAuth } from '../../context/AuthContext';\n\n// * STYLES IMPORT\n\n\n// * COMPONENTS IMPORT\n// import { loginUser } from '../../hooks/apiCalls';\n\nconst Login = ({navigation}) => {\n  const { logIn } = useAuth();\n\n  const { control, handleSubmit, formState: { errors } } = useForm();\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const loginHandler = async () => {\n    await logIn({email, password});\n  };\n\n  console.log(email.value, password.value);\n\n  return (\n    <SafeAreaView>\n      <CustomText\n        title=\"Login Screen\"\n        h1\n      />\n      \n      <Controller\n        control={control}\n        rules={{\n          required: true\n        }}\n        render={({ field: { onChange, value, onBlur }}) => (\n          <TextInput\n            onBlur={onBlur}\n            onChangeText={onChange}\n            value={value}\n            keyboardType=\"email-address\"\n            placeholder=\"Enter email\"\n          />\n        )}\n        name=\"email\"\n        defaultValue=\"\"\n      />\n      {errors.email && <Text>Email is required.</Text>}\n\n      \n      <Controller\n        control={control}\n        rules={{\n          required: true\n        }}\n        render={({ field: { onChange, value, onBlur }}) => (\n          <TextInput\n            onBlur={onBlur}\n            onChangeText={onChange}\n            value={value}\n            secureTextEntry={true}\n            placeholder=\"Enter password\"\n          />\n        )}\n        name=\"password\"\n        defaultValue=\"\"\n      />\n      {errors.password && <Text>Password is required.</Text>}\n\n      <Button title=\"Login\" onPress={handleSubmit(loginHandler)}/>\n\n      {/* <TextInput\n        placeholder=\"Email\"\n        value=\"Meda.Murray27@yahoo.com\"\n        onChangeText={input => setEmail(input)}>\n      </TextInput>\n      <TextInput\n        placeholder=\"Password\"\n        value=\"room7forlife\"\n        onChangeText={input => setPassword(input)}>\n      </TextInput>\n      <TouchableOpacity onPress={loginHandler}>\n        <CustomText\n          title=\"Login\"\n          p\n        />\n      </TouchableOpacity> */}\n    </SafeAreaView>\n  )\n}\n\nexport default Login\n"]},"metadata":{},"sourceType":"module"}